#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

echo "Making sure pre-commit is up-to-date..."
diff -q assets/pre-commit ./.git/hooks/pre-commit >> /dev/null
if [[ "$?" != "0" ]]; then
    echo "Files don't match; updating hook. Please re-run commit."
    cp assets/pre-commit ./.git/hooks/pre-commit
    exit 1
fi
echo "✅"


echo "Runing gofmt and go vet..."
fmtfiles=$(gofmt -s -l .)
if [[ "${fmtfiles}" != "" ]]; then
    echo "The following files need formatting:"
    echo "${fmtfiles}"
    echo "Please run 'gofmt -s -w .' and recommit"
    exit 1
fi
go vet
if [[ "$?" != "0" ]]; then
    exit 1
fi
echo "✅"

echo "Running golangci-lint..."
golangci-lint run --exclude-files _test.go
if [[ "$?" != "0" ]]; then
    exit 1
fi
echo "✅"

echo "Running staticcheck..."
staticcheck
if [[ "$?" != "0" ]]; then
    exit 1
fi
echo "✅"

echo "Running tests..."
go test . ./server ./client -coverpkg .,./server,./client -coverprofile=./assets/coverage
if [[ "$?" != "0" ]]; then
    exit 1
fi
go tool cover -html=./assets/coverage -o ./assets/coverage.html && rm ./assets/coverage
echo "✅"
